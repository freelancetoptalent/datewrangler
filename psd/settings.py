"""
Django settings for psd project.

Generated by 'django-admin startproject' using Django 1.9.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
PROJECT_APP_PATH = os.path.dirname(os.path.abspath(__file__))
PROJECT_APP = os.path.basename(PROJECT_APP_PATH)
BASE_DIR = os.path.dirname(PROJECT_APP_PATH)

SITE_ID = 1
DEBUG = False

ADMINS = (
    ('PSD', 'bostonpsd@polyspeeddating.com'),
)

ADMIN_FOR = ('register','psd.register',)

MANAGERS = ADMINS
EMAIL_SUBJECT_PREFIX = '[PSD] '

EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

LOGIN_REDIRECT_URL = '../..'
LOGOUT_REDIRECT_URL = "/"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'u^(pq=bw73uspn4#mmlx+*a&5#**7#k6j-6k=umkj$=3fl!aaw'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django_nose',

    # You can replace site.base in your local_settings.py.
    # Ensure it keep before 'psd' in the list, so, its templates overrides the defaults
    'sites.base',
    'psd',
    'register',
    'matchmaker',
    'django.contrib.admindocs'
]


MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'psd.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'psd.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

#STATIC_ROOT = '/var/www/rainbow.datewrangler.com/' 
STATIC_ROOT = os.path.join(BASE_DIR, "static/")
print( "STATIC_ROOT = %s" % (STATIC_ROOT, ) )

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
STATIC_URL = '/static/'


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#    {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True

TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'




R_SOURCE_DIR = os.path.join(BASE_DIR, 'Rs/')

LOG_DIR = os.path.join(BASE_DIR, 'logs/')

import logging
#logging.basicConfig(filename=LOG_DIR+"logfile.log",level=logging.DEBUG)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s\n%(message)s'
        },
        'simple': {
            'format': '\n%(levelname)s %(asctime)s %(message)s'
        },
    },
    'handlers': {
        'file_logging': {
            'level' : 'INFO',
            'class' : 'logging.handlers.RotatingFileHandler',
            'backupCount' : 5,
            'maxBytes': 5000000,
            'filename': os.path.join(BASE_DIR, 'logs', 'file_log.log'),
            'formatter':'simple'
            },
        'db_logging': {
            'level' : 'DEBUG',
            'class' : 'logging.handlers.RotatingFileHandler',
            'backupCount' : 5,
            'maxBytes': 5000000,
            'filename':  os.path.join(BASE_DIR, 'logs', 'django-db.log')
            },
        'register': {
            'level' : 'DEBUG',
            'class' : 'logging.handlers.RotatingFileHandler',
            'backupCount' : 5,
            'maxBytes': 5000000,
            'filename':  os.path.join(BASE_DIR, 'logs', 'register.log'),
            'formatter':'verbose'
            },
        'payment': {
            'level' : 'DEBUG',
            'class' : 'logging.handlers.RotatingFileHandler',
            'backupCount' : 5,
            'maxBytes': 5000000,
            'filename':  os.path.join(BASE_DIR, 'logs', 'payment.log'),
            'formatter':'verbose'
            },
        'matchmaker': {
            'level' : 'DEBUG',
            'class' : 'logging.handlers.RotatingFileHandler',
            'backupCount' : 5,
            'maxBytes': 5000000,
            'filename':  os.path.join(BASE_DIR, 'logs', 'matchmaker.log'),
            'formatter':'verbose'
            },
         'console':{
            'level': 'WARNING',
            'class':'logging.StreamHandler',
            },
        },

    'loggers': {
        'django' : {
            'handlers': ['file_logging'],
            'level' : 'DEBUG',
            'propagate' : True,
            },
        'register' : {
            'handlers': ['register'],
            'level' : 'DEBUG',
            'propagate' : True,
            },
        'payment' : {
            'handlers': ['payment'],
            'level' : 'DEBUG',
            'propagate' : True,
            },
        'matchmaker' : {
            'handlers': ['matchmaker'],
            'level' : 'DEBUG',
            'propagate' : True,
            },
        'django.db' : {
            'handlers' : ['db_logging'],
            'level' : 'DEBUG',
            'propagate': False,
            },
        }
}



# Allow any settings to be defined in local_settings.py which should be
# ignored in your version control system allowing for settings to be
# defined per machine.

# Instead of doing "from .local_settings import *", we use exec so that
# local_settings has full access to everything defined in this module.
# Also force into sys.modules so it's visible to Django's autoreload.


# Change this to local settings to switch to real (private) settings
#f = os.path.join(PROJECT_APP_PATH, "local_settings.py")
f = os.path.join(PROJECT_APP_PATH, "local_settings.py")
#f = os.path.join(PROJECT_APP_PATH, "sandbox_local_settings.py")

if os.path.exists(f):
    import sys
    import imp
    module_name = "%s.local_settings".format(PROJECT_APP)
    module = imp.new_module(module_name)
    module.__file__ = f
    sys.modules[module_name] = module
    print "loading file %s" % (f, )
    exec(open(f, "rb").read())
else:
    print "\n\nNO LOCAL SETTINGS FILE %s found\n\n" % (f, )

#NOSE_ARGS = ['--nocapture',
#             '--nologcapture',]
